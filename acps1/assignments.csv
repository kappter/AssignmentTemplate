title,course,strand,date,q1,q2,q3,q4,starter,preparer,demo,description,content,scale
Intro: Complex Applications 1,AdvCPS1,01-01,1,"Students will demonstrate their ability to develop apps using input, calculations, output.","Students will develop a simple application that takes user input, performs a calculation, and displays the result. For example, a basic calculator app, a temperature converter, or a BMI calculator. The final submission will be a fully functional app demonstrating these capabilities.",,,,,,,,
Intro: Complex Applications 2,AdvCPS1,01-01,2,"Students will demonstrate their ability to develop apps using control structures like loops, if else blocks, select, switch, etc.","Students will develop a simple application that utilizes various control structures to solve a problem. For example, a quiz app that uses if-else blocks for decision making, a number guessing game using loops, or a menu-driven program using switch/select statements. The final submission will be a fully functional app demonstrating these control structures.",,,,,,,,
Intro: Complex Applications 3,AdvCPS1,01-01,3,Students will demonstrate their ability to develop apps using object orient design with classes and object instantiation.,"Students will develop a simple application that utilizes object-oriented design principles. For example, creating a basic inventory system for a store where items are objects, or a simple game where players and enemies are objects with attributes and methods. The final submission will be a functional app demonstrating the use of classes and object instantiation.",,,,,,,,
Intro: Complex Applications 4,AdvCPS1,01-01,4,Students will demonstrate their ability to develop apps using data structures and sequential file access I/O features.,Students will develop a simple application that uses arrays to store data and implements file I/O for reading from and writing to files. An example could be a simple contact management system where contacts are stored in an array and saved to a file.,,,,,,,,
Portfolio Setup,AdvCPS1,07-01,5,Students will create a portfolio of their individual and group work using a Github web repository with a functioning readme and subdirectories to house the projects throughout the schoolyear. ,"Students will set up a GitHub repository, create a structured layout with subdirectories for different projects, and write a README file that describes their work and portfolio structure.",,,,,,,,
Recursive Algorithms,AdvCPS1,01-02,6,Students will analyze and solve recursive function or methods.,Students will work on exercises that involve writing and debugging recursive functions. They will analyze example problems and implement their own recursive solutions in a programming language of their choice.,,,,,,,,
Recursive Problem Solving,AdvCPS1,01-02,7,Students will utilize recursive algorithms to solve a problem.,"Students will work on a set of problems that require recursive solutions. They will write, test, and debug recursive algorithms to solve these problems, ensuring they understand the process and can explain their solutions.",,,,,,,,
Recursive Cases,AdvCPS1,01-02,8,"Students will identify the base case, recursive case, and action of each recursive function or method.","Students will analyze several recursive functions, identify the base case and recursive case, and explain the actions taken in each step. They will then implement their own recursive functions with clear base and recursive cases.",,,,,,,,
Recursive Helpers,AdvCPS1,01-02,9,Students will understand the use of a recursive helper function or method.,"Students will explore examples of recursive helper functions, identify their purposes, and practice writing their own recursive helpers to solve problems more effectively.",,,,,,,,
Advanced Method Writing,AdvCPS1,01-03,10,Students will create and call overloaded constructors and methods in an application. ,Students will practice creating and calling overloaded constructors and methods through guided examples and hands-on exercises.,,,,,,,,
Binary Search,AdvCPS1,02-01,11,Students will demonstrate the ability to search a data structure using a binary search and compare the efficiency and appropriateness of sequential and binary searches.,Students will engage in a series of activities and exercises to understand and implement binary search and compare it with sequential search algorithms.,,,,,,,,
Iterative Sorting Algorithms,AdvCPS1,02-02,12,"Sorting Iteratively with Selection, Insertion and Bubble Algorithms","Students will engage in hands-on activities to implement and compare Selection Sort, Insertion Sort, and Bubble Sort algorithms.",,,,,,,,
Recursive Sorting Algorithms,AdvCPS1,02-02,13,"Students will be able to recognize and use recursive sorting algorithms in applications such as merge sort, quick sort and heap sort.","Students will actively engage in learning through implementation and analysis of Merge Sort, Quick Sort, and Heap Sort.",,,,,,,,
Quadratic and Binary Sorting,AdvCPS1,02-02,14,Students will be able to recognize and use quadratic and binary sorts in applications and determine their Big O efficiency notation.,"Students will actively engage in learning through implementation and analysis of Bubble Sort, Insertion Sort, and Binary Search.",,,,,,,,
,AdvCPS1,,15,,,,,,,,,,
,AdvCPS1,,16,,,,,,,,,,
,AdvCPS1,,17,,,,,,,,,,
,AdvCPS1,,18,,,,,,,,,,
,AdvCPS1,,19,,,,,,,,,,
,AdvCPS1,,20,,,,,,,,,,
,AdvCPS1,,21,,,,,,,,,,
,AdvCPS1,,22,,,,,,,,,,
,AdvCPS1,,23,,,,,,,,,,
,AdvCPS1,,24,,,,,,,,,,
,AdvCPS1,,25,,,,,,,,,,
,AdvCPS1,,26,,,,,,,,,,
,AdvCPS1,,27,,,,,,,,,,
,AdvCPS1,,28,,,,,,,,,,
,AdvCPS1,,29,,,,,,,,,,
,AdvCPS1,,30,,,,,,,,,,
,AdvCPS1,,31,,,,,,,,,,
,AdvCPS1,,32,,,,,,,,,,